//
// Copyright (c) 2007 Tridium, Inc
// All Rights Reserved.
//
// History:
//   18 Jun 16  Titus   created
//   23 Jun 16  Titus   Modified
//

//@niagaraIcon="module://icons/x16/io.png"
class MQTTSUB
  extends Component    
{
@defaultOnClone
@config @asStr property Buf(64) Host
@config property int Port = 1883
@config @asStr property Buf(64) Topic
@config @asStr property Buf(16) Clientid
@config @asStr property Buf(16) Username
@config @asStr property Buf(16) Password
@config @readonly property int Int_Msg = -1
@config property int QOS = 2
@config property bool Enable = false

define int Disconnected = 0
define int Connected = 1
define Str NetworkStatus = "Disconnected, Connected"
@range=NetworkStatus
@readonly property byte status = Disconnected

define int Ok = 0
define int Err_InvalidHost = 1
define int Err_InvalidPort = 2
define int Err_InvalidClientId = 3
define int Err_InvalidTopic = 4

define Str NwError = "Ok, Invalid Host, Invalid Port, Invalid ClientId, Invalid Topic"
@range=NwError
@readonly property byte error = 0

@config @readonly property int Sub_ID = -1
define Log log

	virtual override void stop()
	{
	log.message("MQTT Subscriber app is stopped!\n")
	}

	virtual override void start()
	{
	log.message("MQTT Subscriber app is started!\n")
	// Don't touch hardware until input value is valid
	if ( !Sys.app.isSteadyState() ) 
	return

	if (name.equals("MQTTSUB"))
	inst = 0;
	if (name.equals("MQTTSU1"))
	inst = 1;
	if (name.equals("MQTTSU2"))
	inst = 2;
	if (name.equals("MQTTSU3"))
	inst = 3;
	if (name.equals("MQTTSU4"))
	inst = 4;
	if (name.equals("MQTTSU5"))
	inst = 5;
	if (name.equals("MQTTSU6"))
	inst = 6;
	if (name.equals("MQTTSU7"))
	inst = 7;
	if (name.equals("MQTTSU8"))
	inst = 8;
	if (name.equals("MQTTSU9"))
	inst = 9;
	if (name.equals("MQTTS10"))
	inst = 10;
	if (name.equals("MQTTS11"))
	inst = 11;
	if (name.equals("MQTTS12"))
	inst = 12;
	if (name.equals("MQTTS13"))
	inst = 13;
	if (name.equals("MQTTS14"))
	inst = 14;
	if (name.equals("MQTTS15"))
	inst = 15;
	}

	override void changed(Slot slot)
	{
	super.changed(slot)
	// Don't respond to prop changes while app is loading
	if (!Sys.app.isRunning()) return
	}

	virtual override void execute()
	{
		if( count == 1 )
		{
			for ( int i=0; i<14; ++i )
			{
			if(inst == i)
			Sub_ID := i
			}
		count++;
		Clientid.copyFromStr("subscriber")
		changed(MQTTSUB.Clientid)
		}

		if( this.Sub_ID != -1 )
		{
		MqttDev.doMqttSubscriberMsg(Sub_ID, Enable, Int_Msg,  Host.toStr(), Topic.toStr(), Port, Clientid.toStr(), Username.toStr(), Password.toStr(), QOS)
		}

		if( this.Sub_ID != -1 && this.Enable )
		{

		if (Port == 0)
			error := Err_InvalidPort
		else if (Host.toStr().length() == 0)
			error := Err_InvalidHost
		else if (Clientid.toStr().length() == 0)
			error := Err_InvalidClientId
		else if (Topic.toStr().length() == 0)
			error := Err_InvalidTopic
		else
			error := Ok

		this.msg_int = MqttDev.doMqttSubscriberInt(this.Sub_ID)
		this.nw_err_id = MqttDev.doMqttNwErrID_Sub()
		this.nw_status = MqttDev.doMqttNetworkStatus_Sub()
		topic_rcd = MqttDev.doMqttRead_Topic()

			if( this.topic_rcd == Topic.toStr() )
			Int_Msg := this.msg_int

		nw_arr[this.nw_err_id] = this.nw_status

//	log.message("################# SEDONA  handle[0] : ${handle[0]}, handle[1] : ${handle[1]} ############\n");

//	if(this.Sub_ID == this.nw_err_id)
//	log.message("################# SEDONA: $name nw_err_id : $nw_err_id  nw_status : $nw_status #############\n")	

//	if(nw_arr[this.nw_err_id] == 1)
//	log.message("Network Array Status; ID is $id; Name is $name; nw_arr[0] : ${nw_arr[0]}, nw_arr[1] : ${nw_arr[1]},  nw_arr[2] : ${nw_arr[2]},  ID -> $nw_err_id, NW STAT -> $nw_status\n")	

			if( nw_arr[this.Sub_ID] < 0 || error != 0 )
//			if( this.nw_status < 0 && this.nw_err_id == this.Sub_ID )
			{
//		log.message("SEDONA: $name : Not able to connect to network!, Sublisher ID is $Sub_ID; NW status $nw_status; nw_err_id $nw_err_id\n")
			this.status := Disconnected
			this.Int_Msg := -1
			}
			else
			this.status := Connected
		}
		if( !this.Enable )
		{
		this.status := Disconnected
		this.Int_Msg := -1
		}	
	}

static protected Obj handle = null
//inline int[SUB_MAX] handle;

Str topic_rcd;
define int SUB_MAX = 30;
private int nw_status = 0;
private int nw_err_id = -1;
private int msg_int = -1;
private static inline int[SUB_MAX] nw_arr;

//Don't declare the below two variables as static, it will not create the Sub_IDs correctly.
int count = 1;
int inst = -1;
}

//
// Copyright (c) 2007 Tridium, Inc
// All Rights Reserved.
//
// History:
//   22 Jul 16  Titus   created
//

//@niagaraIcon="module://icons/x16/io.png"
class MqttSub
  extends Component    
{
@defaultOnClone
@config @asStr property Buf(64) Host
@config @asStr property Buf(16) Port
@config @asStr property Buf(64) Topic
@config @asStr property Buf(16) Clientid
@config @asStr property Buf(16) Username
@config @asStr property Buf(16) Password
@config @asStr @readonly property Buf(64) Payload
//@config property int QOS = 2
@config property bool Enable = false

define int Disconnected = 0
define int Connected = 1
define Str NetworkStatus = "Disconnected, Connected"
@range=NetworkStatus
@readonly property byte status = Disconnected

define int No_Err = 0
define int Err_InvalidHost = 1
define int Err_InvalidPort = 2
define int Err_InvalidClientId = 3
define int Err_InvalidTopic = 4
define int Err_Unknown = 5

define Str NwError = "No Err, Invalid Host, Invalid Port, Invalid ClientId, Invalid Topic, Unknown Err"
@range=NwError
@readonly property byte error = 0

@config @readonly property int Sub_ID = -1
define Log log

	virtual override void stop()
	{
	log.message("MQTT Subscriber app is stopped!\n")
	}

	virtual override void start()
	{
	// Don't touch hardware until input value is valid
	if ( !Sys.app.isSteadyState() ) 
	return

	if (name.equals("MqttSub"))
	inst = 0;
	if (name.equals("MqttSu1"))
	inst = 1;
	if (name.equals("MqttSu2"))
	inst = 2;
	if (name.equals("MqttSu3"))
	inst = 3;
	if (name.equals("MqttSu4"))
	inst = 4;
	if (name.equals("MqttSu5"))
	inst = 5;
	if (name.equals("MqttSu6"))
	inst = 6;
	if (name.equals("MqttSu7"))
	inst = 7;
	if (name.equals("MqttSu8"))
	inst = 8;
	if (name.equals("MqttSu9"))
	inst = 9;
	if (name.equals("MqttS10"))
	inst = 10;
	if (name.equals("MqttS11"))
	inst = 11;
	if (name.equals("MqttS12"))
	inst = 12;
	if (name.equals("MqttS13"))
	inst = 13;
	if (name.equals("MqttS14"))
	inst = 14;
	if (name.equals("MqttS15"))
	inst = 15;

//Set port to default 1883
	Port.copyFromStr("1883")
	changed(MqttSub.Port)

	log.message("MQTT Subscriber app is started!\n")

	}

	bool validInputs()
	{
		if ( Port.toStr().length() == 0 )
			error := Err_InvalidPort
		else if (Host.toStr().length() == 0)
			error := Err_InvalidHost
		else if (Clientid.toStr().length() == 0)
			error := Err_InvalidClientId
		else if (Topic.toStr().length() == 0)
			error := Err_InvalidTopic
		else
			error := No_Err

		if(!error)
		return true;

	return false;
	}

	override void changed(Slot slot)
	{
	super.changed(slot)
	// Don't respond to prop changes while app is loading
	if (!Sys.app.isRunning()) return
	}

	virtual override void execute()
	{
		if( count == 1 )
		{
			for ( int i=0; i<15; ++i )
			{
			if(inst == i)
			Sub_ID := i
			}
		count++;
		//Set clientid as 'subscriber'
		Clientid.copyFromStr("subscriber")
		changed(MqttSub.Clientid)

		//Set port to default 1883
		Port.copyFromStr("1883")
		changed(MqttSub.Port)

		}

		if( this.Sub_ID != -1 )
		{
		MqttNew.doMqttNewSubscriberMsg(Sub_ID, Enable, Payload.toStr(),  Host.toStr(), Topic.toStr(), Port.toStr(), Clientid.toStr(), Username.toStr(), Password.toStr())
		}

		if( this.Sub_ID != -1 && this.Enable && validInputs() )
		{
		rcd_msg = MqttNew.doMqttNewSubscriberInt(this.Sub_ID)
		nw_status_array = MqttNew.doMqttNewNetworkStatus_Sub(array_dummy)
		topic_rcd = MqttNew.doMqttNewRead_Topic()

//		log.message("SEDONA: $name: Topic is $topic_rcd, from native file and message received is $rcd_msg\n")

/*
			if ( this.topic_rcd.equals(Topic.toStr()) )
			{
			Payload.copyFromStr(this.rcd_msg)
			changed(MqttSub.Payload)
			}

			if( ((nw_status_array[this.Sub_ID]) < 0) )
			{
			this.status := Disconnected
			error := Err_Unknown
			Payload.copyFromStr("null")
			changed(MqttSub.Payload)
			}
*/

/*

			if( ((nw_status_array[this.Sub_ID]) == -2) )
			{
			this.status := Disconnected
			Payload.copyFromStr("null")
			changed(MqttSub.Payload)
			error := Err_InvalidHost
			}				
			if( ((nw_status_array[this.Sub_ID]) == -1) )
			{
			this.status := Disconnected
			Payload.copyFromStr("null")
			changed(MqttSub.Payload)
			error := Err_Unknown
			}
			if( ((nw_status_array[this.Sub_ID]) == 1) )
			{
			this.status := Connected
			error := No_Err
			}
*/

			switch((nw_status_array[this.Sub_ID]))
			{
			case -2:
				this.status := Disconnected
				error := Err_InvalidHost
				Payload.copyFromStr("null")
				changed(MqttSub.Payload)
				break
			case 1:
				this.status := Connected
				error := No_Err
					if( this.topic_rcd.equals(Topic.toStr()) )
					{
					Payload.copyFromStr(this.rcd_msg)
					changed(MqttSub.Payload)
					}
				break
			default:
				this.status := Disconnected
				Payload.copyFromStr("null")
				changed(MqttSub.Payload)
				error := Err_Unknown
				break
			}
		}

		if( !this.Enable )
		{
		this.status := Disconnected
		Payload.copyFromStr("null")
		changed(MqttSub.Payload)
		}	
	}

Str topic_rcd;
define int SUB_MAX = 30;
Str rcd_msg;
//Buf rcd_msg;
//Buf(64) rcd_msg;
//Buf[64] test;
//Str[2] str_dummy;
inline int[SUB_MAX] array_dummy;
int[SUB_MAX] nw_status_array;
int[SUB_MAX] nw_disable_array;

//Don't declare the below two variables as static, it will not create the Sub_IDs correctly (0,1,2....) .
int count = 1;
int inst = -1;
}
